-*- markdown -*-

A WSGI deployment tool - stop being a sysadmin

Introduction
------------

I'm trying to automate deployment and server admin in a sane way. 

By formalizing some project conventions and the server stack, in 
theory large chunks of the deployment process can be automated.
The creation of nodes follows a 'push' model. This means that servers
are commissioned from your client machine. Node interaction and 
commissioning is done with libcloud.

For documentation and examples see http://www.kraftwerk-wsgi.com/

Design notes, terminology
-------------------------

The admin installs kraftwerk on his own computer. The admin 
pushes projects to nodes. Server nodes do not require a kraftwerk 
library. Server nodes are referred to by their hostname (can be 
anything because kraftwerk appends your /etc/hosts). 

Kraftwerk also helps you start WSGI projects (although it is 
completely agnostic to frameworks or library requirements). Project 
root folders are virtualenvs. Project root folders contain a Python 
package which would be your webapp. Projects include a kraftwerk.yaml 
config too where you can specify domains and various things.

The kraftwerk cli (command line interface) is path aware. If executed 
inside a project directory it interacts with that project.

Most server scripts and files in the project skeleton can be tailored 
and changed by supplying a secondary template directory in the admin 
config. This means you can tweak default parameter and add packages 
to the system install procedure among other things. Currently there 
is no way to change the project skeleton structure although this is a 
possible planned feature.

Kraftwerk supplies additional services to projects that request them.
These are databases, key-value storages, cache, queues and certain 
I/O. Services are coupled with a `setup.sh` template script run each 
time a new project is deployed. Each service dumps and loads data. See
commands documentation.

Development vs. stage vs. live
------------------------------

The goal of a stage deployment is to mirror "real-world" application 
conditions to decrease the chances of fucking up once an application 
is deployed to a live server. To this end kraftwerk provides the 
plumbing for a convenient and quick stage test. Secondarily stage 
deployments are useful for client previews and internal testing.

Kraftwerk is agnostic to the development environment. Kraftwerk only 
cares about config and a Python WSGI codebase. Additionally kraftwerk 
wants to make it easy to bundle website data for easy backup and 
restore (refer to "Services" section).

You may run the setup-node against any ubuntu box with root SSH 
access. You are not stuck with libcloud. (I even have it running on 
Debian Squeeze).

Server Stack
------------

runit, nginx, gunicorn, virtualenv
Python stack: Crypto, PIL, DB drivers

Of these gunicorn is the most interesting choice. Kraftwerk is making 
a big bet on this horse. It simplifies configuration and setup 
drastically. It also performs well with long-requests (WebSockets).

`web` user and a `/web` directory to contain project code and uploads

Consult the `node_setup.sh` script template for details.

Testing locally
---------------

I'm using VirtualBox to test projects locally. I manually create a 
minimal Ubuntu instance, overwrite /root/.ssh/authorized_keys, edit my 
/etc/hosts and run the kraftwerk setup-node against it. Even better 
would be some VServer/XEN drivers for libcloud which would in theory 
enable you to use the create-node command locally too.

Known issues
------------

Kraftwerk can't pick up the libcloud dependency automatically. You'll 
have to install it manually like so:

    easy_install http://github.com/cloudkick/libcloud/tarball/master

It has been reported that libcloud has further dependencies with this 
installation method. If you get further errors try this:

    pip install http://www.zope.org/Products/ZopeInterface/3.3.0/zope.interface-3.3.0.tar.gz

Inspiration
-----------

+ Heroku
+ Ian Bicking's Silver Lining and Zachary Voase's markdoc - big chunks 
of code were taken from these projects.