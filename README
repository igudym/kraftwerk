The opinionated deployment tool - automation and WSGI

Wishlist
--------

+ Easy to get up and going locally with a Django project - ideally 
one or two commands until there's an activated virtualenv and my 
preferred Django project skeleton is inside TextMate. [DONE]
+ A directory of deployment configuration where I define the caching 
schema, number of workers, staging and live URL's, perhaps super user
accounts.
+ Command line tools to load and dump data from _all_ sources 
(PostgreSQL, redis, CouchDB, user uploaded files etc.). Some S3 
backup points perhaps. Something like the Bundle feature in Heroku.
+ Easy migration strategy for scaling to multiple servers.
+ Easy inspection of data and node health.
+ Easy destroy/create of nodes.
+ Easy running one-off commands in the right environment on a remote 
server (think Django syncdb). Or easy dropping into a remote bash 
shell with everything set up for a project.
+ Easy local testing - both quick for code-alt+tab-refresh action and 
a full stack VirtualBox/VMWare deployment.
+ Easy CDN management at the application level - Environments should 
be aware of how to serve static media.
+ Easy to venture off the beaten path - this is the enemy of 
automation!
+ Easy to define complimentary processes (like worker daemons).

Strategy
--------

By formalizing some project conventions and the server stack, in 
theory large chunks of the deployment process can be automated.
The creation of nodes follows a 'push' model. This means that servers
are commissioned from your client machine. Node interaction and 
commissioning is done with libcloud. 

An admin YAML config file is saved in the user's home folder. The 
user can specify libcloud access credentials

Ideal API
---------

# kraftwerk create-node myserver
> Looks like you haven't used kraftwerk before ... [some init]
> Waiting for node ...
> Edit /etc/hosts ? [y/n] y
> root SSH access is now ready
# kraftwerk init myproject
> myproject virtualenv is ready
# cd myproject
# source bin/activate

Server Tools
------------

runit, nginx, gunicorn, virtualenv
Python stack: Crypto, PIL

Inspiration
-----------

Heroku, Silver Lining